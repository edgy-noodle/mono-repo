---
- name: Preliminary tasks and checks
  hosts: all
  become: true
  become_method: su
  pre_tasks:
    - name: Fail fast if incompatible OS detected
      fail:
        msg: "OS should be Debian/Ubuntu, not {{ ansible_distribution }}"
      when: ansible_distribution not in ['Ubuntu', 'Debian']

    - name: Install sudo
      package:
        name: sudo
        state: latest
        update_cache: yes

    - name: Add account to sudoers
      user:
        name: edgy
        groups: sudo
        append: true

    - name: Install updates
      apt:
        upgrade: true
        update_cache: yes

    - name: Reboot
      reboot:


- name: Provision all nodes
  hosts: k8s
  become: true
  tasks:
    - name: Disable SWAP
      shell: swapoff -a

    - name: Disable SWAP in fstab
      replace:
        path: /etc/fstab
        regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
        replace: '# \1'

    - name: Load overlay module
      community.general.modprobe:
        name: overlay
        persistent: present

    - name: Load br_netfilter module
      community.general.modprobe:
        name: br_netfilter
        persistent: present

    - name: Copy 99-kubernetes-cri.conf CRI config
      copy:
        src: ../configs/k8s/99-kubernetes-cri.conf
        dest: /etc/sysctl.d/99-kubernetes-cri.conf

    - name: Create keyrings directory
      file:
        path: /etc/apt/keyrings
        state: directory

    - name: Download k8s keys
      get_url:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        dest: /etc/apt/keyrings/kubernetes-archive-keyring.asc

    - name: Add k8s package repos
      deb822_repository:
        name: kubernetes
        types: deb
        suites: kubernetes-xenial
        components: main
        uris: https://apt.kubernetes.io/
        signed_by: /etc/apt/keyrings/kubernetes-archive-keyring.asc

    - name: Install packages - containerd, k8s, pipx, jsonpatch
      package:
        name:
          - containerd
          - kubelet
          - kubeadm
          - kubectl
          - python3-kubernetes
          - python3-jsonpatch
          - pipx
        update_cache: yes
        state: latest

    - name: Create containerd directory
      file:
        path: /etc/containerd
        state: directory

    - name: Generate containerd config
      shell: |
        containerd config default | sudo tee /etc/containerd/config.toml

    - name: Change SystemdCgroup to true in containerd config
      replace:
        path: /etc/containerd/config.toml
        regexp: 'SystemdCgroup = false'
        replace: 'SystemdCgroup = true'

    - name: Disable automatic update for kubelet package
      dpkg_selections:
        name: kubelet
        selection: hold
    - name: Disable automatic update for kubeadm package
      dpkg_selections:
        name: kubeadm
        selection: hold
    - name: Disable automatic update for kubectl package
      dpkg_selections:
        name: kubectl
        selection: hold

    - name: Reload configs
      systemd:
        daemon_reload: true
    - name: Enable containerd service
      systemd:
        name: containerd
        enabled: true
        state: restarted
    - name: Enable kubelet service
      systemd:
        name: kubelet
        enabled: true
        state: started

    - name: Install k8s ansible collection dependency - openshift
      community.general.pipx:
        name: openshift
        install_deps: true
    - name: Install k8s ansible collection dependency - pyyaml
      community.general.pipx:
        name: pyaml


- name: Provision Control Plane Node
  hosts: cpn
  become: true
  tasks:
    - name: Install util packages
      package:
        name:
          - bash-completion
          - bridge-utils
          - net-tools
          - cloud-utils
        update_cache: yes
        state: latest

    - name: Configure kubectl completion and alias
      blockinfile:
        path: ~/.bashrc
        block: |
          source <(kubectl completion bash)
          alias k=kubectl
          complete -F __start_kubectl k

    - name: Download brew installer
      get_url:
        url: https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh
        dest: /home/edgy/install.sh

    - name: Install brew
      command: /home/edgy/install.sh

    - name: Install k9s
      community.general.homebrew:
        name: k9s
        state: present

    - name: Check if CPN needs initializing
      stat:
        path: /etc/kubernetes/admin.conf
      register: kubeadm_init

    - name: Initialize CPN
      command: kubeadm init
      when: not kubeadm_init.stat.exists

    - name: Create .kube directory
      file:
        path: /home/edgy/.kube/
        state: directory

    - name: Copy k8s config
      copy:
        remote_src: true
        src: /etc/kubernetes/admin.conf
        dest: /home/edgy/.kube/config
        force: false

    - name: Download Calico manifest
      get_url:
        url: https://raw.githubusercontent.com/projectcalico/calico/master/manifests/calico.yaml
        dest: /home/edgy/calico.yaml

    - name: Install Calico
      k8s:
        state: present
        src: /home/edgy/calico.yaml

    - name: Generate new token with join command
      command: kubeadm token create --print-join-command
      register: k8s_join_cmd

    - name: Display join command
      debug:
        var: k8s_join_cmd.stdout_lines[0]

    - name: Set join command
      set_fact:
        k8s_join_cmd: "{{ k8s_join_cmd.stdout_lines[0] }}"


- name: Provision worker nodes
  hosts: workers
  become: true
  tasks:
    - name: Check if worker node has joined cluster
      stat:
        path: /etc/kubernetes/kubelet.conf
      register: kubeadm_join

    - name: Join cluster
      command: "{{ hostvars['k8s-cpn'].k8s_join_cmd }}"
      when: not kubeadm_join.stat.exists