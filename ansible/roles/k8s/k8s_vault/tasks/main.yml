# roles/k8s_vault
---
- name: Wait for namespace to exist
  kubernetes.core.k8s_info:
    kind: Namespace
    name: secrets-store
    wait: true
    wait_timeout: 180

- name: Define AWS KMS secret
  kubernetes.core.k8s:
    state: present
    api_version: v1
    kind: Secret
    name: kms-creds
    namespace: secrets-store
    resource_definition:
      data:
        AWS_ACCESS_KEY_ID: "{{ vault_aws_access_key_id | b64encode }}"
        AWS_SECRET_ACCESS_KEY: "{{ vault_aws_secret_access_key | b64encode }}"
        AWS_REGION: "{{ vault_aws_region | b64encode }}"
        AWS_KMS_KEY_ID: "{{ vault_aws_kms_key_id | b64encode }}"
  register: kms_creds
  when:
    - vault_aws_access_key_id is defined
    - vault_aws_secret_access_key is defined
    - vault_aws_region is defined
    - vault_aws_kms_key_id is defined

- name: Wait for vault to be running
  kubernetes.core.k8s_info:
    kind: Pod
    name: vault-0
    namespace: secrets-store
    wait: true
    wait_condition:
      status: True
      type: Initialized
    wait_timeout: 180
  register: vault_running

- name: Wait for secret rotation for kms_creds
  wait_for:
    timeout: 10
  when: kms_creds.changed

- name: Get vault svc
  kubernetes.core.k8s_info:
    kind: Service
    name: vault
    namespace: secrets-store
  register: vault_svc

- name: Register vault svc address
  set_fact:
    vault_address: "{{ vault_svc | json_query('resources[0].spec.clusterIP') }}:{{ vault_svc | json_query('resources[0].spec.ports[?name == `http`].port | [0]') }}"

- name: Verify vault status
  ansible.builtin.uri:
    url: http://{{ vault_address }}/v1/sys/init
    return_content: true
  register: vault_status

- name: Initialize vault
  ansible.builtin.uri:
    url: http://{{ vault_address }}/v1/sys/init
    method: POST
    return_content: true
    body_format: json
    body: |
      {
        "stored_shares": 10,
        "recovery_shares": 10,
        "recovery_threshold": 5
      }
  register: vault_init
  when: (vault_status.content | from_json | json_query('initialized')) is false

- name: Save root token
  local_action: shell echo "\$ANSIBLE_VAULT{{ root_token }}" > ~/mono-repo/ansible/.vault-token
  when: vault_init is not skipped
  vars:
    root_token: "{{ vault_init.content | from_json | json_query('root_token') | vault(secret, vault_id) }}"

- name: Encrypt recovery keys
  set_fact:
    key: "{{ item | vault(secret, vault_id) }}"
  loop: "{{ vault_init.content | from_json | json_query('recovery_keys') }}"
  register: encrypted_keys
  when: vault_init is not skipped

- name: Create a file for recovery keys
  local_action:
    module: copy
    dest: ~/mono-repo/ansible/.vault-keys
    content: ""
  when: vault_init is not skipped

- name: Save recovery keys
  local_action: shell echo "\$ANSIBLE_VAULT{{ item }}" >> ~/mono-repo/ansible/.vault-keys
  when: vault_init is not skipped
  loop: "{{ encrypted_keys | json_query('results[*].[ansible_facts.key] | []') }}"
  ignore_errors: true

- name: Wait for vault to be ready
  kubernetes.core.k8s_info:
    kind: Pod
    name: vault-0
    namespace: secrets-store
    wait: true
    wait_condition:
      status: True
      type: Ready
    wait_timeout: 180
  register: vault_ready

- name: Get vault root token
  set_fact:
    root_token: "{{ lookup('file', '~/mono-repo/ansible/.vault-token') }}"

- name: Wait for vault leader election saved in etcd
  wait_for:
    timeout: 15
  when: vault_init is not skipped

- name: Check for k8s auth
  ansible.builtin.uri:
    url: http://{{ vault_address }}/v1/sys/auth/kubernetes
    return_content: true
    headers:
      X-Vault-Token: "{{ root_token }}"
  register: vault_auth
  ignore_errors: true

- name: Enable k8s auth
  community.hashi_vault.vault_write:
    url: http://{{ vault_address }}
    path: sys/auth/kubernetes
    token: "{{ root_token }}"
    data:
      type: kubernetes
  when: vault_auth is failed

- name: Get k8s API data
  kubernetes.core.k8s_exec:
    pod: vault-0
    namespace: secrets-store
    command: >
      sh -ec 'env | grep -E "KUBERNETES_PORT_443_TCP_(PORT|ADDR)" | sort'
  register: k8s_api
  when: vault_auth is failed

- name: Configure k8s auth
  community.hashi_vault.vault_write:
    url: http://{{ vault_address }}
    path: auth/kubernetes/config
    token: "{{ root_token }}"
    data:
      kubernetes_host: "https://{{addr}}:{{port}}"
  when: vault_auth is failed
  vars:
    addr: "{{ (k8s_api.stdout_lines[0] | split('='))[1] }}"
    port: "{{ (k8s_api.stdout_lines[1] | split('='))[1] }}"

- name: Check for kv engine
  ansible.builtin.uri:
    url: http://{{ vault_address }}/v1/sys/mounts/secret
    return_content: true
    headers:
      X-Vault-Token: "{{ root_token }}"
  register: vault_kv
  ignore_errors: true

- name: Enable kv engine
  community.hashi_vault.vault_write:
    url: http://{{ vault_address }}
    path: sys/mounts/secret
    token: "{{ root_token }}"
    data:
      type: kv
      options: {
        version: "2"
      }
  when: vault_kv is failed

- name: Add policy
  community.hashi_vault.vault_write:
    url: http://{{ vault_address }}
    path: sys/policy/{{ policy_path }}
    token: "{{ root_token }}"
    data:
      policy: "{{ content }}"

- name: Create default role
  community.hashi_vault.vault_write:
    url: http://{{ vault_address }}
    path: auth/kubernetes/role/{{ role_name }}
    token: "{{ root_token }}"
    data:
      name: "{{ role_name }}"
      bound_service_account_names: "{{ role_sa_names }}"
      bound_service_account_namespaces: "{{ role_sa_ns }}"
      policies: "{{ role_policies }}"