# roles/k8s_vault
---
- name: Define AWS KMS secret
  kubernetes.core.k8s:
    state: present
    api_version: v1
    kind: Secret
    name: kms-creds
    namespace: secrets-store
    resource_definition:
      data:
        AWS_ACCESS_KEY_ID: "{{ vault_aws_access_key_id | b64encode }}"
        AWS_SECRET_ACCESS_KEY: "{{ vault_aws_secret_access_key | b64encode }}"
        AWS_REGION: "{{ vault_aws_region | b64encode }}"
        AWS_KMS_KEY_ID: "{{ vault_aws_kms_key_id | b64encode }}"
  when:
    - vault_aws_access_key_id is defined
    - vault_aws_secret_access_key is defined
    - vault_aws_region is defined
    - vault_aws_kms_key_id is defined

- name: Wait for vault to be running
  kubernetes.core.k8s_info:
    kind: Pod
    name: vault-0
    namespace: secrets-store
    wait: true
    wait_condition:
      status: True
      type: Initialized
    wait_timeout: 180
  register: vault_running

- name: Get vault svc
  kubernetes.core.k8s_info:
    kind: Service
    name: vault
    namespace: secrets-store
  register: vault_svc

- name: Register vault svc address
  set_fact:
    vault_address: "{{ vault_svc | json_query('resources[0].spec.clusterIP') }}:{{ vault_svc | json_query('resources[0].spec.ports[?name == `http`].port | [0]') }}"

- name: Verify vault status
  ansible.builtin.uri:
    url: http://{{ vault_address }}/v1/sys/init
    return_content: true
  register: vault_init

- name: Initialize vault
  kubernetes.core.k8s_exec:
    pod: vault-0
    namespace: secrets-store
    command: vault operator init
  register: vault_init
  when:
    - vault_init.content | from_json | json_query('initialized') is false
    - vault_status.stdout_lines[3] is defined
    - vault_status.stdout_lines[3] is search("false")

- name: Save recovery keys
  local_action:
    module: copy
    dest: ~/mono-repo/ansible/.vault-keys
    content: |
      "{{ recovery_key_1 }}"
      "{{ recovery_key_2 }}"
      "{{ recovery_key_3 }}"
      "{{ recovery_key_4 }}"
      "{{ recovery_key_5 }}"
  when: vault_init.changed
  vars:
    recovery_key_1: "{{ (vault_init.stdout_lines[0] | split(':'))[1] | vault(secret, vault_id) }}"
    recovery_key_2: "{{ (vault_init.stdout_lines[1] | split(':'))[1] | vault(secret, vault_id) }}"
    recovery_key_3: "{{ (vault_init.stdout_lines[2] | split(':'))[1] | vault(secret, vault_id) }}"
    recovery_key_4: "{{ (vault_init.stdout_lines[3] | split(':'))[1] | vault(secret, vault_id) }}"
    recovery_key_5: "{{ (vault_init.stdout_lines[4] | split(':'))[1] | vault(secret, vault_id) }}"

- name: Save root token
  local_action:
    module: copy
    dest: ~/mono-repo/ansible/.vault-token
    content: |
      {{ root_token }}
  when: vault_init.changed
  vars:
    root_token: "{{ (vault_init.stdout_lines[6] | split(':'))[1] | trim | vault(secret, vault_id) }}"

- name: Wait for vault to be ready
  kubernetes.core.k8s_info:
    kind: Pod
    name: vault-0
    namespace: secrets-store
    wait: true
    wait_condition:
      status: True
      type: Ready
    wait_timeout: 180
  register: vault_ready

- name: Vault login
  kubernetes.core.k8s_exec:
    pod: vault-0
    namespace: secrets-store
    command: vault login {{ root_token }}
  when: vault_ready
  vars:
    root_token: "{{ lookup('file', '~/mono-repo/ansible/.vault-token') }}"

- name: Check for k8s auth
  kubernetes.core.k8s_exec:
    pod: vault-0
    namespace: secrets-store
    command: vault auth list -format="json"
  when: vault_ready
  register: vault_auth

- name: Enable k8s auth
  kubernetes.core.k8s_exec:
    pod: vault-0
    namespace: secrets-store
    command: vault auth enable kubernetes
  when:
    - vault_ready
    - not vault_auth.stdout is search("kubernetes")

- name: Get k8s API data
  kubernetes.core.k8s_exec:
    pod: vault-0
    namespace: secrets-store
    command: >
      sh -ec 'env | grep -E "KUBERNETES_PORT_443_TCP_(PORT|ADDR)" | sort'
  register: k8s_api

- name: Configure k8s auth
  kubernetes.core.k8s_exec:
    pod: vault-0
    namespace: secrets-store
    command: vault write auth/kubernetes/config kubernetes_host="https://{{addr}}:{{port}}"
  vars:
    addr: "{{ (k8s_api.stdout_lines[0] | split('='))[1] }}"
    port: "{{ (k8s_api.stdout_lines[1] | split('='))[1] }}"
  when: vault_ready

- name: Check for kv engine
  kubernetes.core.k8s_exec:
    pod: vault-0
    namespace: secrets-store
    command: vault secrets list -format="json"
  register: vault_kv
  when: vault_ready

- name: Enable kv engine
  kubernetes.core.k8s_exec:
    pod: vault-0
    namespace: secrets-store
    command: vault secrets enable -path=secret kv
  when:
    - vault_ready
    - not vault_kv.stdout is search("secret/")

- name: Copy policy file
  kubernetes.core.k8s_cp:
    pod: vault-0
    namespace: secrets-store
    state: to_pod
    remote_path: /vault/config/secrets-store.hcl
    content:
      path "secret/*" {
        capabilities = ["read", "list"]
      }
  when: vault_ready

- name: Create secrets-store policy
  kubernetes.core.k8s_exec:
    pod: vault-0
    namespace: secrets-store
    command: vault policy write secrets-store /vault/config/secrets-store.hcl
  when: vault_ready

- name: Create default role
  kubernetes.core.k8s_exec:
    pod: vault-0
    namespace: secrets-store
    command: >
      vault write auth/kubernetes/role/default bound_service_account_names=default \
      bound_service_account_namespaces=grafana,cloudflare-tunnel,postgresql policies=secrets-store ttl=20m
  when: vault_ready